@model JWMaps.ViewModel.HouseholderViewModel
@{
    ViewBag.Title = "Dados do morador";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Dados do morador</h2>

@if (Model.Householder.Visits != null && User.IsInRole(JWMaps.Models.RoleName.CanAdministrate))
{
    @Html.ActionLink("Ver histórico de visitas", "ListVisits", new { id = Model.Householder.Id });
}


@using (Html.BeginForm("Save", "Householders"))
{
    @Html.ValidationSummary();
    <div class="form-group">
        @Html.LabelFor(h => h.Householder.Name)
        @Html.TextBoxFor(h => h.Householder.Name, new { @class = "form-control" })
        @Html.ValidationMessageFor(h => h.Householder.Name)
    </div>
    <div class="form-group">
        @Html.LabelFor(h => h.Householder.Address)
        @Html.TextBoxFor(h => h.Householder.Address, new { @class = "form-control", id = "address", placeholder = "Ex.: Nome da rua, número" })
        @Html.ValidationMessageFor(h => h.Householder.Address)
    </div>
    <div class="form-group">
        @Html.LabelFor(h => h.Householder.Neighbourhood)
        @Html.TextBoxFor(h => h.Householder.Neighbourhood, new { @class = "form-control", id = "neighbourhood" })
        @Html.ValidationMessageFor(h => h.Householder.Neighbourhood)
    </div>
    <div class="form-group">
        @Html.LabelFor(h => h.Householder.City)
        @Html.TextBoxFor(h => h.Householder.City, new { @class = "form-control", id = "city" })
        @Html.ValidationMessageFor(h => h.Householder.City)
    </div>
    <div class="form-group">
        @Html.LabelFor(h => h.Householder.Phone)
        @Html.TextBoxFor(h => h.Householder.Phone, new { @class = "form-control" })
        @Html.ValidationMessageFor(h => h.Householder.Phone)
    </div>
    <div class="form-group">
        @Html.LabelFor(h => h.Householder.ZipCode)
        @Html.TextBoxFor(h => h.Householder.ZipCode, new { @class = "form-control" })
        @Html.ValidationMessageFor(h => h.Householder.ZipCode)
    </div>
    <div class="form-group">
        <label>Quem o está revisitando?</label>
        @Html.DropDownListFor(m => m.Householder.Publisher, new SelectList(Model.Publishers, "Id", "Name"), "Ninguém", new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.Householder.Publisher)
    </div>
    <div class="form-group">
        <label>Qual o tipo de endereço?</label>
        @Html.EnumDropDownListFor(m => m.Householder.Category, new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.Householder.Category)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Householder.Observations)
        @Html.TextAreaFor(m => m.Householder.Observations, new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.Householder.Observations)
    </div>
    @Html.HiddenFor(h => h.Householder.Id)
    <button type="submit" class="btn btn-primary">Salvar</button>
    @Html.AntiForgeryToken()
}

<div id="map_canvas" class="jumbotron" style="width: 95%; height: 432px" />

@section scripts
{
    @Scripts.Render("~/bundles/jqueryval");

    <script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?key=AIzaSyCDXPe6iLZmeOYItmk84ZuV7wVJ_vSQQQs&sensor=false&libraries=places"></script>
    <script type="text/javascript" language="javascript">

        var geocoder;
        var map;
        var address = $('#address').val() + ", " + $('#neighbourhood').val() + " - " + $('#city').val();

        function initialize() {

            var input = document.getElementById("address");
            var autocomplete = new google.maps.places.Autocomplete(input, { types: ["geocode"] });

            if (navigator.geolocation) {
               navigator.geolocation.getCurrentPosition(function (position) {
                  var geolocation = {
                      lat: position.coords.latitude,
                      lng: position.coords.longitude
                  };
                  var circle = new google.maps.Circle({
                      center: geolocation,
                      radius: position.coords.accuracy
                  });
                  autocomplete.setBounds(circle.getBounds());
               });
            }

            autocomplete.addListener("place_changed", function () {
                var placeResult = autocomplete.getPlace();
                var addressComponents = placeResult.address_components;
                var street = "";
                var number = "";
                var city = "";
                var neighbourhood = "";

                // loop through addressComponents and find the route and street_number types
                for (var i = 0, i_len = addressComponents.length; i < i_len; i++) {
                    var addressType = addressComponents[i].types[0];

                    switch (addressType) {
                        case "route":
                            street = addressComponents[i]["long_name"];
                            break;

                        case "street_number":
                            number = addressComponents[i]["long_name"];
                            break;
                        case 'locality':
                            city = addressComponents[i]["long_name"];
                            break;
                        case 'sublocality_level_1':
                            neighbourhood = addressComponents[i]["long_name"];
                            break;
                    }
                }

                input.value = street + ", " + number;
                document.getElementById("city").value = city;
                document.getElementById("neighbourhood").value = neighbourhood;
            });

            if(@Model.Householder.Id == 0)
            {
                $("#map_canvas").remove();
                return;
            }

            geocoder = new google.maps.Geocoder();

            var latlng = new google.maps.LatLng(-34.397, 150.644);

            var myOptions = {
                zoom: 17,
                center: latlng,
                mapTypeControl: true,
                mapTypeControlOptions: { style: google.maps.MapTypeControlStyle.DROPDOWN_MENU },
                navigationControl: true,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            };

            map = new google.maps.Map(document.getElementById("map_canvas"), myOptions);

            if (geocoder) {
                geocoder.geocode({ 'address': address }, function (results, status) {
                    if (status == google.maps.GeocoderStatus.OK) {
                        if (status != google.maps.GeocoderStatus.ZERO_RESULTS) {
                            map.setCenter(results[0].geometry.location);

                            var infowindow = new google.maps.InfoWindow(
                                {
                                    content: '<b>' + address + '</b>',
                                    size: new google.maps.Size(150, 50)
                                });

                            var marker = new google.maps.Marker({
                                position: results[0].geometry.location,
                                map: map,
                                title: address
                            });
                            google.maps.event.addListener(marker, 'click', function () {
                                infowindow.open(map, marker);
                            });

                        } else {
                            alert("No results found");
                        }
                    } else {
                        alert("Geocode was not successful for the following reason: " + status);
                    }
                });
            }
        }

        $(document).ready(initialize);
    </script>
}
